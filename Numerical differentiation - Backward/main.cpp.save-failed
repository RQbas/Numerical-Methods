#include <iostream>
#include <cstdio>
#include <vector>
#include <math.h>
#include <cstdlib>
using namespace std;

class input
{
    public:
    int n1;
    double h;
    double x0;
    void fill_input()
    {
        cout<<"Insert n number: \n";
        cin>>n1;
        cout<<"Insert step (h): \n";
        cin>>h;
        cout<<"Insert x0: \n";
        cin>>x0;
    }
    input()
    {
        fill_input();
    }


};
class final_formula: public input
{
    public:
    double **tab;
    double *tabvalues;
    double **init_fullfill(int s);
    void show_matrix();
    double getn1() const
    {
     return input::n1;
    }
     double geth()
    {
     return input::h;
    }
    double getx0()
    {
     return input::x0;
    }
    void backward_diff(int s)
    {
    for(int j=1;j<s+1;j++)
        for(int i=s;i>(j-1);i--)
            tab[i][j] = tab[i][j-1] - tab[i-1][j-1];
    }
    void ToVector(int s)
    {
    tabvalues= new double[s];
    for(int i=0; i<s; i++)
    {
        tabvalues[i]=tab[s][i+1];
    }
    }
    final_formula()
        {
        tab=init_fullfill(n1);
        backward_diff(n1);
        ToVector(n1);
        }


};
double **final_formula::init_fullfill(int s)
{
     {
        double **tab1=new double*[s+1];
            for(int i=0; i<(s+1); i++)
                tab1[i]= new double[s+1];
        for(int i=0; i<s+1; i++)
        {
            for(int j=0; j<s+1; j++)
            {
                tab1[i][j]=0;
            }
            tab1[i][0]=x0;
        }
        int k=n1;
        double arg;
        for(int i=0; i<n1+1; i++)
        {
                arg=(double) (tab1[i][0]-(k*h));
                tab1[i][0]=cos(arg);
                k--;
        }
        return tab1;
    }
}

void final_formula::show_matrix()
{
    printf("\n***********Backward Difference Table ***********\n");
    for(int i=0;i<n1+1;i++)
    {
        for(int j=0;j<=i;j++)
            printf("\t    %.6f",tab[i][j]);
        printf("\n");
    }

}




//----------------------------------//

void show(double *tab, int size)
{
    for(int i=0; i<size; i++)
        cout<<tab[i]<<" ";
    cout<<"\n";
}

double *second_order(double *tab1, int tab1_size) //multiplication of polynomial (polynomial*polynomial)
{
   double *prod = new double[tab1_size+tab1_size-1];
   double *prod1 = new double[tab1_size+tab1_size-1];
   for (int i = 0; i<tab1_size+tab1_size-1; i++)
     prod[i] = 0;

   for (int i=0; i<tab1_size; i++)
   {
     for (int j=0; j<tab1_size; j++)
         prod[i+j] += tab1[i]*tab1[j];
   }
    prod1[0]=0;
    for(int i=1; i<2*tab1_size-1 ;i++)
        prod1[i]=prod[i-1];
   return prod1;
}

void first_order(double *tab, int size)
{
    for(int i=0; i<size; i++)
    {
        tab[i]=(1.0/(1.0+i));

    }
}

double value_derivative_first(double *values, double *coeff, double h, double n)
{
double part_val=0;
for(int i=0; i<n; i++)
    part_val+=values[i]*coeff[i];
    return (1/h)*part_val;
}
double value_derivative_second(double *values, double *coeff, double h, double n)
{
double part_val=0;
for(int i=0; i<n; i++)
    part_val+=values[i]*coeff[i];
    return (1/(h*h))*part_val;
}

int main()
{
    final_formula initial;
    double *coeff1;
    double *coeff2;
    int n=initial.getn1();
    coeff1= new double[n];

    first_order(coeff1, initial.getn1());
    coeff2=second_order(coeff1, initial.getn1());
    cout<<"First order derivative: "<<value_derivative_first(initial.tabvalues, coeff1, initial.h, initial.n1 )<<"\n";
    initial.tab=initial.init_fullfill(initial.n1+1);
        initial.backward_diff(initial.n1+1);
        initial.ToVector(initial.n1+1);
    show(coeff2, n1+1);
    cout<<"Second order derivative: "<<value_derivative_second(initial.tabvalues, coeff2, initial.h, initial.n1 )<<"\n";

    system("pause");
    return 0;

}
